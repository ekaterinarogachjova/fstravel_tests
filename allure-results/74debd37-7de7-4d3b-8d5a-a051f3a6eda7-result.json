{"name": "test_click_button_and_check_results", "status": "failed", "statusDetails": {"message": "Failed: Переход на страницу результатов не произошёл или элемент не найден: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3d7409f94e73d1ff58565adb9f2977fd\")>\n\n    @allure.feature(\"Нажатие кнопки и проверка перехода\")\n    @pytest.mark.dependency(name=\"click_button_and_check_results\", depends=[\"set_city_from\", \"set_city_to\"])\n    def test_click_button_and_check_results(driver):\n        with allure.step(\"Ожидание видимости и кликабельности кнопки\"):\n            try:\n                button = WebDriverWait(driver, 20).until(\n                    EC.element_to_be_clickable((By.CSS_SELECTOR, SELECTORS[\"search_button\"]))\n                )\n                assert button.is_enabled(), \"Кнопка не активна для нажатия\"\n    \n                # Прокрутка к элементу\n                driver.execute_script(\"arguments[0].scrollIntoView(true);\", button)\n                time.sleep(0.5)  # Небольшая пауза после прокрутки\n    \n                with allure.step(\"Выполнение двойного клика по кнопке\"):\n                    actions = ActionChains(driver)\n                    try:\n                        actions.double_click(button).perform()\n                    except Exception as e:\n                        allure.attach(str(e), name=\"Ошибка при двойном клике\", attachment_type=allure.attachment_type.TEXT)\n                        # fallback к двойному клику через JS (редко используется, но можно)\n                        driver.execute_script(\"\"\"\n                            var evt = new MouseEvent('dblclick', {\n                                bubbles: true,\n                                cancelable: true,\n                                view: window\n                            });\n                            arguments[0].dispatchEvent(evt);\n                        \"\"\", button)\n            except Exception as e:\n                attach_screenshot(driver, \"double_click_button_failure\")\n                pytest.fail(f\"Не удалось выполнить двойной клик по кнопке: {e}\")\n    \n        with allure.step(\"Ожидание перехода на страницу с результатами\"):\n            expected_url_part = \"https://fstravel.com/searchtour/\"\n            try:\n>               WebDriverWait(driver, 20).until(EC.url_contains(expected_url_part))\n\ntest_01.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3d7409f94e73d1ff58565adb9f2977fd\")>, method = <function url_contains.<locals>._predicate at 0x00000198C78E6E80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\ndriver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"3d7409f94e73d1ff58565adb9f2977fd\")>\n\n    @allure.feature(\"Нажатие кнопки и проверка перехода\")\n    @pytest.mark.dependency(name=\"click_button_and_check_results\", depends=[\"set_city_from\", \"set_city_to\"])\n    def test_click_button_and_check_results(driver):\n        with allure.step(\"Ожидание видимости и кликабельности кнопки\"):\n            try:\n                button = WebDriverWait(driver, 20).until(\n                    EC.element_to_be_clickable((By.CSS_SELECTOR, SELECTORS[\"search_button\"]))\n                )\n                assert button.is_enabled(), \"Кнопка не активна для нажатия\"\n    \n                # Прокрутка к элементу\n                driver.execute_script(\"arguments[0].scrollIntoView(true);\", button)\n                time.sleep(0.5)  # Небольшая пауза после прокрутки\n    \n                with allure.step(\"Выполнение двойного клика по кнопке\"):\n                    actions = ActionChains(driver)\n                    try:\n                        actions.double_click(button).perform()\n                    except Exception as e:\n                        allure.attach(str(e), name=\"Ошибка при двойном клике\", attachment_type=allure.attachment_type.TEXT)\n                        # fallback к двойному клику через JS (редко используется, но можно)\n                        driver.execute_script(\"\"\"\n                            var evt = new MouseEvent('dblclick', {\n                                bubbles: true,\n                                cancelable: true,\n                                view: window\n                            });\n                            arguments[0].dispatchEvent(evt);\n                        \"\"\", button)\n            except Exception as e:\n                attach_screenshot(driver, \"double_click_button_failure\")\n                pytest.fail(f\"Не удалось выполнить двойной клик по кнопке: {e}\")\n    \n        with allure.step(\"Ожидание перехода на страницу с результатами\"):\n            expected_url_part = \"https://fstravel.com/searchtour/\"\n            try:\n                WebDriverWait(driver, 20).until(EC.url_contains(expected_url_part))\n                WebDriverWait(driver, 20).until(\n                    lambda d: d.execute_script('return document.readyState') == 'complete'\n                )\n                WebDriverWait(driver, 20).until(\n                    EC.visibility_of_element_located((By.CSS_SELECTOR, SELECTORS[\"results_block\"]))\n                )\n            except Exception as e:\n                attach_screenshot(driver, \"results_page_failure\")\n>               pytest.fail(f\"Переход на страницу результатов не произошёл или элемент не найден: {e}\")\nE               Failed: Переход на страницу результатов не произошёл или элемент не найден: Message:\n\ntest_01.py:144: Failed"}, "steps": [{"name": "Ожидание видимости и кликабельности кнопки", "status": "passed", "steps": [{"name": "Выполнение двойного клика по кнопке", "status": "passed", "start": 1748279528554, "stop": 1748279528871}], "start": 1748279527992, "stop": 1748279528871}, {"name": "Ожидание перехода на страницу с результатами", "status": "failed", "statusDetails": {"message": "Failed: Переход на страницу результатов не произошёл или элемент не найден: Message: \n\n", "trace": "  File \"C:\\Users\\admin\\Desktop\\fs\\fstravel_tests\\test_01.py\", line 144, in test_click_button_and_check_results\n    pytest.fail(f\"Переход на страницу результатов не произошёл или элемент не найден: {e}\")\n    ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\admin\\Desktop\\fs\\fstravel_tests\\.venv\\Lib\\site-packages\\_pytest\\outcomes.py\", line 178, in fail\n    raise Failed(msg=reason, pytrace=pytrace)\n"}, "steps": [{"name": "Прикрепление скриншота: results_page_failure", "status": "passed", "attachments": [{"name": "results_page_failure", "source": "587c0e58-7f0f-478b-822c-eb0618f9d6d3-attachment.png", "type": "image/png"}], "start": 1748279549286, "stop": 1748279549545}], "start": 1748279528871, "stop": 1748279549545}], "start": 1748279527992, "stop": 1748279549547, "uuid": "0e52377f-6179-4743-a4aa-644ade291069", "historyId": "a0d0aebc6ccedafb4fe6e79695fb22e4", "testCaseId": "a0d0aebc6ccedafb4fe6e79695fb22e4", "fullName": "test_01#test_click_button_and_check_results", "labels": [{"name": "feature", "value": "Нажатие кнопки и проверка перехода"}, {"name": "tag", "value": "dependency(name='click_button_and_check_results', depends=['set_city_from', 'set_city_to'])"}, {"name": "suite", "value": "test_01"}, {"name": "host", "value": "DESKTOP-4F3BQLH"}, {"name": "thread", "value": "8248-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_01"}]}